@model BookSearchApp.Models.HomeViewModel

@{
    ViewData["Title"] = "Home Page";
}

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h2 class="mb-0">Welcome to Book Search App</h2>
                </div>
                <div class="card-body">
                    <div class="search-container">
                        <form asp-controller="Book" asp-action="Search" method="get" class="mb-3">
                            <div class="input-group">
                                <input type="text" id="searchInput" name="SearchModel.SearchTerm" class="form-control" placeholder="Search for books by title, author, or keyword..." 
                                       autocomplete="off">
                                <button class="btn btn-primary" type="submit">
                                    <i class="bi bi-search"></i> Search
                                </button>
                            </div>
                        </form>
                        <div id="searchSuggestions" class="search-suggestions card d-none">
                            <div class="card-body p-0">
                                <ul id="suggestionsList" class="list-group list-group-flush">
                                    <!-- Suggestions will be populated here -->
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Fiction Panel -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h3 class="mb-0">Fiction</h3>
                </div>
                <div class="card-body">
                    <p>We have @Model.FictionBooks.Count fiction books across @Model.FictionSubgenres.Count subgenres.</p>
                    
                    <div class="row row-cols-2 row-cols-md-3 row-cols-lg-4 g-3">
                        @foreach (var subgenre in Model.FictionSubgenres)
                        {
                            var booksInSubgenre = Model.FictionBooks.Count(b => b.Subgenres.Contains(subgenre));
                            <div class="col">
                                <div class="card h-100 category-card">
                                    <div class="card-body text-center">
                                        <h5 class="card-title">@subgenre</h5>
                                        <p class="card-text">@booksInSubgenre books</p>
                                        <a asp-controller="Book" asp-action="Index" asp-route-subgenre="@subgenre" class="btn btn-outline-primary">Browse</a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Non-Fiction Panel -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h3 class="mb-0">Non-Fiction</h3>
                </div>
                <div class="card-body">
                    <p>We have @Model.NonFictionBooks.Count non-fiction books across @Model.NonFictionSubgenres.Count subgenres.</p>
                    
                    <div class="row row-cols-2 row-cols-md-3 row-cols-lg-4 g-3">
                        @foreach (var subgenre in Model.NonFictionSubgenres)
                        {
                            var booksInSubgenre = Model.NonFictionBooks.Count(b => b.Subgenres.Contains(subgenre));
                            <div class="col">
                                <div class="card h-100 category-card">
                                    <div class="card-body text-center">
                                        <h5 class="card-title">@subgenre</h5>
                                        <p class="card-text">@booksInSubgenre books</p>
                                        <a asp-controller="Book" asp-action="Index" asp-route-subgenre="@subgenre" class="btn btn-outline-primary">Browse</a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Make category cards clickable
            document.querySelectorAll('.category-card').forEach(card => {
                card.addEventListener('click', function(e) {
                    // Don't trigger if clicking on the button itself
                    if (!e.target.closest('.btn')) {
                        const btn = this.querySelector('.btn');
                        if (btn) btn.click();
                    }
                });
                
                // Add hover effect
                card.classList.add('cursor-pointer');
            });
            
            // Add search suggestions functionality
            const searchInput = document.getElementById('searchInput');
            const suggestionsContainer = document.getElementById('searchSuggestions');
            const suggestionsList = document.getElementById('suggestionsList');
            
            let debounceTimer;
            const minChars = 2;
            
            // Handle keyboard input
            searchInput.addEventListener('input', function() {
                const query = this.value.trim();
                
                // Clear any pending debounce timer
                clearTimeout(debounceTimer);
                
                // Hide suggestions if query is too short
                if (query.length < minChars) {
                    suggestionsContainer.classList.add('d-none');
                    return;
                }
                
                // Debounce the API call (300ms)
                debounceTimer = setTimeout(() => {
                    fetchSuggestions(query);
                }, 300);
            });
            
            // Hide suggestions when clicking outside
            document.addEventListener('click', function(e) {
                if (!searchInput.contains(e.target) && !suggestionsContainer.contains(e.target)) {
                    suggestionsContainer.classList.add('d-none');
                }
            });
            
            // Show suggestions when input is focused (if it has content)
            searchInput.addEventListener('focus', function() {
                if (this.value.trim().length >= minChars) {
                    suggestionsContainer.classList.remove('d-none');
                }
            });
            
            // Handle keyboard navigation in suggestions
            searchInput.addEventListener('keydown', function(e) {
                if (suggestionsContainer.classList.contains('d-none')) return;
                
                const suggestions = suggestionsList.querySelectorAll('li');
                const activeItem = suggestionsList.querySelector('.active');
                let activeIndex = -1;
                
                // Find the current active item index
                if (activeItem) {
                    [...suggestions].forEach((item, i) => {
                        if (item === activeItem) activeIndex = i;
                    });
                }
                
                // Handle arrow key navigation
                if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    if (activeIndex < suggestions.length - 1) {
                        if (activeItem) activeItem.classList.remove('active');
                        suggestions[activeIndex + 1].classList.add('active');
                        suggestions[activeIndex + 1].scrollIntoView({ block: 'nearest' });
                    }
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    if (activeIndex > 0) {
                        if (activeItem) activeItem.classList.remove('active');
                        suggestions[activeIndex - 1].classList.add('active');
                        suggestions[activeIndex - 1].scrollIntoView({ block: 'nearest' });
                    }
                } else if (e.key === 'Enter' && activeItem) {
                    e.preventDefault();
                    activeItem.click();
                } else if (e.key === 'Escape') {
                    suggestionsContainer.classList.add('d-none');
                }
            });
            
            // Fetch suggestions from the API
            function fetchSuggestions(query) {
                fetch(`/Book/GetSearchSuggestions?term=${encodeURIComponent(query)}`)
                    .then(response => response.json())
                    .then(data => {
                        // Clear previous suggestions
                        suggestionsList.innerHTML = '';
                        
                        if (data.length === 0) {
                            suggestionsContainer.classList.add('d-none');
                            return;
                        }
                        
                        // Add new suggestions
                        data.forEach(book => {
                            const li = document.createElement('li');
                            li.className = 'list-group-item';
                            
                            // Highlight matching text in title
                            const titleRegex = new RegExp(`(${escapeRegExp(query)})`, 'gi');
                            const highlightedTitle = book.title.replace(titleRegex, '<span class="highlight">$1</span>');
                            
                            li.innerHTML = `
                                <div class="book-title">${highlightedTitle}</div>
                                <div class="book-author">by ${book.author}</div>
                                <small class="text-muted">${book.category} - ${book.subgenres}</small>
                            `;
                            
                            li.addEventListener('click', function() {
                                // Set the search input to the book title
                                searchInput.value = book.title;
                                // Hide suggestions
                                suggestionsContainer.classList.add('d-none');
                                // Submit the search form
                                searchInput.form.submit();
                            });
                            
                            suggestionsList.appendChild(li);
                        });
                        
                        // Show suggestions
                        suggestionsContainer.classList.remove('d-none');
                    })
                    .catch(error => {
                        console.error('Error fetching search suggestions:', error);
                    });
            }
            
            // Helper function to escape special characters in regex
            function escapeRegExp(string) {
                return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            }
        });
    </script>
}
