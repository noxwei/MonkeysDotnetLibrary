@model BookSearchApp.Models.BookSearchViewModel

@{
    ViewData["Title"] = "Book Search";
}

<div class="container-fluid">
    <div class="row">
        <!-- Filter Panel (Left) -->
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Filters</h5>
                </div>
                <div class="card-body">
                    <form asp-action="Search" method="get" id="filterForm">
                        <!-- Main Category Filter -->
                        <div class="mb-3">
                            <label for="MainCategory" class="form-label">Category</label>
                            <select asp-for="SearchModel.MainCategory" class="form-select" id="MainCategory" onchange="document.getElementById('filterForm').submit();">
                                <option value="">All Categories</option>
                                @foreach (var category in Model.AllCategories)
                                {
                                    <option value="@category" selected="@(Model.SearchModel?.MainCategory == category)">@category</option>
                                }
                            </select>
                        </div>

                        <!-- Subgenres Filter -->
                        <div class="mb-3">
                            <label class="form-label">Subgenres</label>
                            <div class="overflow-auto" style="max-height: 200px;">
                                @foreach (var subgenre in Model.AllSubgenres)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input filter-checkbox" type="checkbox" name="SearchModel.SelectedSubgenres" value="@subgenre" id="subgenre_@subgenre.Replace(" ", "_")" 
                                               @(Model.SearchModel?.SelectedSubgenres != null && Model.SearchModel.SelectedSubgenres.Contains(subgenre) ? "checked" : "")>
                                        <label class="form-check-label" for="subgenre_@subgenre.Replace(" ", "_")">
                                            @subgenre
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Authors Filter -->
                        <div class="mb-3">
                            <label class="form-label">Authors</label>
                            <div class="overflow-auto" style="max-height: 200px;">
                                @foreach (var author in Model.AllAuthors)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input filter-checkbox" type="checkbox" name="SearchModel.SelectedAuthors" value="@author" id="author_@author.Replace(" ", "_")" 
                                               @(Model.SearchModel?.SelectedAuthors != null && Model.SearchModel.SelectedAuthors.Contains(author) ? "checked" : "")>
                                        <label class="form-check-label" for="author_@author.Replace(" ", "_")">
                                            @author
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Search Options -->
                        <div class="mb-3">
                            <label class="form-label">Search In</label>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" asp-for="SearchModel.SearchInTitle" id="searchInTitle">
                                <label class="form-check-label" for="searchInTitle">
                                    Title
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" asp-for="SearchModel.SearchInSummary" id="searchInSummary">
                                <label class="form-check-label" for="searchInSummary">
                                    Summary
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" asp-for="SearchModel.SearchInKeywords" id="searchInKeywords">
                                <label class="form-check-label" for="searchInKeywords">
                                    Keywords
                                </label>
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Apply Filters</button>
                            <a href="@Url.Action("Index", "Book")" class="btn btn-outline-secondary">Clear Filters</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Search and Results (Middle and Right) -->
        <div class="col-md-9">
            <!-- Search Bar (Middle) -->
            <div class="card mb-4">
                <div class="card-body">
                    <form asp-action="Search" method="get" class="d-flex">
                        <input type="text" asp-for="SearchModel.SearchTerm" class="form-control me-2" placeholder="Search for books...">
                        <button type="submit" class="btn btn-primary">Search</button>
                    </form>
                </div>
            </div>
            
            <!-- Results Summary -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div>
                    <h5 class="mb-0">
                        @if (!string.IsNullOrEmpty(Model.SelectedSubgenre))
                        {
                            <span>@Model.SelectedSubgenre Books</span>
                        }
                        else if (string.IsNullOrEmpty(Model.SearchTerm))
                        {
                            <span>All Books</span>
                        }
                        else
                        {
                            <span>Search Results for: "@Model.SearchTerm"</span>
                        }
                    </h5>
                    <small class="text-muted">Showing @(((Model.CurrentPage - 1) * 9) + 1)-@(Math.Min(Model.CurrentPage * 9, Model.TotalBooks)) of @Model.TotalBooks books</small>
                </div>
                <div>
                    <span class="text-muted">Page @Model.CurrentPage of @Model.TotalPages</span>
                </div>
            </div>

            <!-- Results (Right) -->
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                @foreach (var book in Model.SearchResults)
                {
                    <div class="col">
                        <div class="card h-100 book-card">
                            <div class="card-body">
                                <h5 class="card-title">@book.Title</h5>
                                <h6 class="card-subtitle mb-2 text-muted">@book.Author</h6>
                                <p class="card-text text-truncate">@book.Summary</p>
                                <div class="d-flex flex-wrap gap-1 mb-2">
                                    @foreach (var subgenre in book.Subgenres)
                                    {
                                        <a href="@Url.Action("Search", new { SelectedSubgenres = new[] { subgenre } })" class="badge bg-secondary text-decoration-none">@subgenre</a>
                                    }
                                </div>
                                <button class="btn btn-sm btn-outline-primary show-details" data-bs-toggle="modal" data-bs-target="#bookModal" 
                                        data-id="@book.Id" data-title="@book.Title" data-author="@book.Author" 
                                        data-summary="@book.Summary" data-category="@book.MainCategory"
                                        data-subgenres="@string.Join(", ", book.Subgenres)"
                                        data-keywords="@string.Join(", ", book.Keywords)">
                                    View Details
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>

            @if (!Model.SearchResults.Any())
            {
                <div class="alert alert-info mt-3">
                    No books found matching your criteria.
                </div>
            }
            
            <!-- Pagination -->
            @if (Model.TotalPages > 1)
            {
                <nav aria-label="Page navigation" class="mt-4">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Search", new { 
                                page = Model.CurrentPage - 1, 
                                subgenre = Model.SelectedSubgenre,
                                SearchTerm = Model.SearchModel?.SearchTerm,
                                MainCategory = Model.SearchModel?.MainCategory,
                                SelectedSubgenres = Model.SearchModel?.SelectedSubgenres,
                                SelectedAuthors = Model.SearchModel?.SelectedAuthors,
                                SearchInTitle = Model.SearchModel?.SearchInTitle,
                                SearchInSummary = Model.SearchModel?.SearchInSummary,
                                SearchInKeywords = Model.SearchModel?.SearchInKeywords
                            })" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        
                        @{
                            const int maxPagesToShow = 5;
                            int startPage = Math.Max(1, Model.CurrentPage - maxPagesToShow / 2);
                            int endPage = Math.Min(Model.TotalPages, startPage + maxPagesToShow - 1);
                            
                            // Adjust start page if we're near the end
                            if (endPage - startPage + 1 < maxPagesToShow)
                            {
                                startPage = Math.Max(1, endPage - maxPagesToShow + 1);
                            }
                            
                            // Show first page if not included in range
                            if (startPage > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Search", new { 
                                        page = 1, 
                                        subgenre = Model.SelectedSubgenre,
                                        SearchTerm = Model.SearchModel?.SearchTerm,
                                        MainCategory = Model.SearchModel?.MainCategory,
                                        SelectedSubgenres = Model.SearchModel?.SelectedSubgenres,
                                        SelectedAuthors = Model.SearchModel?.SelectedAuthors,
                                        SearchInTitle = Model.SearchModel?.SearchInTitle,
                                        SearchInSummary = Model.SearchModel?.SearchInSummary,
                                        SearchInKeywords = Model.SearchModel?.SearchInKeywords
                                    })">1</a>
                                </li>
                                if (startPage > 2)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                            }
                            
                            // Show page links
                            for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Search", new { 
                                        page = i, 
                                        subgenre = Model.SelectedSubgenre,
                                        SearchTerm = Model.SearchModel?.SearchTerm,
                                        MainCategory = Model.SearchModel?.MainCategory,
                                        SelectedSubgenres = Model.SearchModel?.SelectedSubgenres,
                                        SelectedAuthors = Model.SearchModel?.SelectedAuthors,
                                        SearchInTitle = Model.SearchModel?.SearchInTitle,
                                        SearchInSummary = Model.SearchModel?.SearchInSummary,
                                        SearchInKeywords = Model.SearchModel?.SearchInKeywords
                                    })">@i</a>
                                </li>
                            }
                            
                            // Show last page if not included in range
                            if (endPage < Model.TotalPages)
                            {
                                if (endPage < Model.TotalPages - 1)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Search", new { 
                                        page = Model.TotalPages, 
                                        subgenre = Model.SelectedSubgenre,
                                        SearchTerm = Model.SearchModel?.SearchTerm,
                                        MainCategory = Model.SearchModel?.MainCategory,
                                        SelectedSubgenres = Model.SearchModel?.SelectedSubgenres,
                                        SelectedAuthors = Model.SearchModel?.SelectedAuthors,
                                        SearchInTitle = Model.SearchModel?.SearchInTitle,
                                        SearchInSummary = Model.SearchModel?.SearchInSummary,
                                        SearchInKeywords = Model.SearchModel?.SearchInKeywords
                                    })">@Model.TotalPages</a>
                                </li>
                            }
                        }
                        
                        <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Search", new { 
                                page = Model.CurrentPage + 1, 
                                subgenre = Model.SelectedSubgenre,
                                SearchTerm = Model.SearchModel?.SearchTerm,
                                MainCategory = Model.SearchModel?.MainCategory,
                                SelectedSubgenres = Model.SearchModel?.SelectedSubgenres,
                                SelectedAuthors = Model.SearchModel?.SelectedAuthors,
                                SearchInTitle = Model.SearchModel?.SearchInTitle,
                                SearchInSummary = Model.SearchModel?.SearchInSummary,
                                SearchInKeywords = Model.SearchModel?.SearchInKeywords
                            })" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            }
            
            <!-- Log Panel -->
            <div class="card mt-4">
                <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center" id="logPanelHeader">
                    <h5 class="mb-0">
                        <button class="btn btn-link text-white text-decoration-none p-0" type="button" data-bs-toggle="collapse" data-bs-target="#logPanel" aria-expanded="false" aria-controls="logPanel">
                            Debug Logs <i class="bi bi-chevron-down"></i>
                        </button>
                    </h5>
                    <button class="btn btn-sm btn-outline-light" id="clearLogs">Clear</button>
                </div>
                <div id="logPanel" class="collapse" aria-labelledby="logPanelHeader">
                    <div class="card-body">
                        <div class="log-container bg-dark text-light p-3 rounded" style="height: 300px; overflow-y: auto; font-family: monospace; font-size: 0.9rem;">
                            <div class="text-center p-3" id="logLoading">
                                <div class="spinner-border text-light" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-2">Loading logs...</p>
                            </div>
                            <div id="logContent" style="display: none;">
                                @if (Model.LogMessages != null && Model.LogMessages.Any())
                                {
                                    @foreach (var log in Model.LogMessages)
                                    {
                                        <div class="log-entry">@log</div>
                                    }
                                }
                                else
                                {
                                    <div class="log-entry text-muted">No logs available.</div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Book Details Modal -->
<div class="modal fade" id="bookModal" tabindex="-1" aria-labelledby="bookModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="bookModalLabel">Book Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h2 id="modalTitle"></h2>
                <h5 class="text-muted">By <a href="#" id="modalAuthorLink"></a></h5>
                <div class="mb-3">
                    <strong>Category:</strong> <span id="modalCategory"></span>
                </div>
                <div class="mb-3">
                    <strong>Subgenres:</strong> <span id="modalSubgenresContainer"></span>
                </div>
                <div class="mb-3">
                    <strong>Keywords:</strong> <span id="modalKeywords"></span>
                </div>
                <div class="mb-3">
                    <strong>Summary:</strong>
                    <p id="modalSummary" class="mt-2"></p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Handle filter checkboxes
            document.querySelectorAll('.filter-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    document.getElementById('filterForm').submit();
                });
            });

            // Handle book details modal
            document.querySelectorAll('.show-details').forEach(button => {
                button.addEventListener('click', function() {
                    const title = this.getAttribute('data-title');
                    const author = this.getAttribute('data-author');
                    const summary = this.getAttribute('data-summary');
                    const category = this.getAttribute('data-category');
                    const subgenres = this.getAttribute('data-subgenres');
                    const keywords = this.getAttribute('data-keywords');

                    document.getElementById('modalTitle').textContent = title;
                    
                    // Make author clickable
                    const authorLink = document.getElementById('modalAuthorLink');
                    authorLink.textContent = author;
                    authorLink.href = '@Url.Action("Search")' + '?SelectedAuthors=' + encodeURIComponent(author);
                    
                    document.getElementById('modalSummary').textContent = summary;
                    document.getElementById('modalCategory').textContent = category;
                    
                    // Make subgenres clickable
                    const subgenresContainer = document.getElementById('modalSubgenresContainer');
                    subgenresContainer.innerHTML = '';
                    
                    if (subgenres) {
                        const subgenreArray = subgenres.split(', ');
                        subgenreArray.forEach((subgenre, index) => {
                            const subgenreLink = document.createElement('a');
                            subgenreLink.href = '@Url.Action("Search")' + '?SelectedSubgenres=' + encodeURIComponent(subgenre);
                            subgenreLink.className = 'badge bg-secondary text-decoration-none me-1';
                            subgenreLink.textContent = subgenre;
                            subgenresContainer.appendChild(subgenreLink);
                            
                            if (index < subgenreArray.length - 1) {
                                subgenresContainer.appendChild(document.createTextNode(' '));
                            }
                        });
                    }
                    
                    document.getElementById('modalKeywords').textContent = keywords;
                });
            });
            
            // Handle lazy loading of logs
            const logPanel = document.getElementById('logPanel');
            const logLoading = document.getElementById('logLoading');
            const logContent = document.getElementById('logContent');
            
            // Add event listener for when the log panel is shown
            logPanel.addEventListener('show.bs.collapse', function () {
                // Simulate loading delay (remove this in production)
                setTimeout(function() {
                    logLoading.style.display = 'none';
                    logContent.style.display = 'block';
                    
                    // Scroll to bottom of log container
                    const logContainer = document.querySelector('.log-container');
                    if (logContainer) {
                        logContainer.scrollTop = logContainer.scrollHeight;
                    }
                }, 500);
            });
            
            // Add event listener for when the log panel is hidden
            logPanel.addEventListener('hidden.bs.collapse', function () {
                logLoading.style.display = 'block';
                logContent.style.display = 'none';
            });
            
            // Clear logs button
            document.getElementById('clearLogs').addEventListener('click', function(e) {
                e.stopPropagation(); // Prevent the collapse toggle
                const logEntries = document.querySelectorAll('.log-entry');
                logEntries.forEach(entry => {
                    entry.remove();
                });
                logContent.innerHTML = '<div class="log-entry text-muted">Logs cleared.</div>';
            });
        });
    </script>
} 